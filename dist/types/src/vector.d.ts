export declare const procedures: {
    vectorQ: import("./interpreter").BuiltInProcedureDefinition<"obj", ({ obj }: Partial<Record<"obj", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IBoolean>;
    makeVector: import("./interpreter").BuiltInProcedureDefinition<"fill" | "k", ({ k, fill }: Partial<Record<"fill" | "k", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IVector>;
    vector: import("./interpreter").BuiltInProcedureDefinition<"objs", ({ objs }: Partial<Record<"objs", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IVector>;
    vectorLength: import("./interpreter").BuiltInProcedureDefinition<"vec", ({ vec }: Partial<Record<"vec", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.INumber>;
    vectorRef: import("./interpreter").BuiltInProcedureDefinition<"k" | "vec", ({ vec, k }: Partial<Record<"k" | "vec", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.Object>;
    vectorSetD: import("./interpreter").BuiltInProcedureDefinition<"obj" | "k" | "vec", ({ vec, k, obj }: Partial<Record<"obj" | "k" | "vec", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => ["<undefined>"]>;
    vector2list: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "vec", ({ vec, start, end }: Partial<Record<"end" | "start" | "vec", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.List>;
    list2vector: import("./interpreter").BuiltInProcedureDefinition<"list", ({ list }: Partial<Record<"list", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IVector>;
    vector2string: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "vec", ({ vec, start, end }: Partial<Record<"end" | "start" | "vec", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IString>;
    string2vector: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "str", ({ str, start, end }: Partial<Record<"end" | "start" | "str", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IVector>;
    vectorCopy: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "vec", ({ vec, start, end }: Partial<Record<"end" | "start" | "vec", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IVector>;
    vectorCopyD: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "to" | "at" | "from", ({ to, at, from, start, end }: Partial<Record<"end" | "start" | "to" | "at" | "from", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => ["<undefined>"]>;
    vectorAppend: import("./interpreter").BuiltInProcedureDefinition<"vecs", ({ vecs }: Partial<Record<"vecs", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IVector>;
    vectorFillD: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "fill" | "vec", ({ vec, fill, start, end }: Partial<Record<"end" | "start" | "fill" | "vec", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IVector>;
};
