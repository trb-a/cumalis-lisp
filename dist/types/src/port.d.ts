import { LISP } from "./types";
export declare const closePort: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined) => LISP.IBoolean | ["<undefined>"]>;
export declare const readChar: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.Character | LISP.EndOfFile>;
export declare const writeString: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "str" | "port", ({ str, port, start, end }: Partial<Record<"end" | "start" | "str" | "port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => ["<undefined>"]>;
export declare const procedures: {
    callWithPort: import("./interpreter").BuiltInProcedureDefinition<"proc" | "port", ({ port, proc }: Partial<Record<"proc" | "port", LISP.Object | LISP.Object[] | null>>) => LISP.List>;
    inputPortQ: import("./interpreter").BuiltInProcedureDefinition<"obj", ({ obj }: Partial<Record<"obj", LISP.Object | LISP.Object[] | null>>) => LISP.IBoolean>;
    outputPortQ: import("./interpreter").BuiltInProcedureDefinition<"obj", ({ obj }: Partial<Record<"obj", LISP.Object | LISP.Object[] | null>>) => LISP.IBoolean>;
    textualPortQ: import("./interpreter").BuiltInProcedureDefinition<"obj", ({ obj }: Partial<Record<"obj", LISP.Object | LISP.Object[] | null>>) => LISP.IBoolean>;
    binaryPortQ: import("./interpreter").BuiltInProcedureDefinition<"obj", ({ obj }: Partial<Record<"obj", LISP.Object | LISP.Object[] | null>>) => LISP.IBoolean>;
    portQ: import("./interpreter").BuiltInProcedureDefinition<"obj", ({ obj }: Partial<Record<"obj", LISP.Object | LISP.Object[] | null>>) => LISP.IBoolean>;
    inputPortOpenQ: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>) => LISP.IBoolean>;
    outputPortOpenQ: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>) => LISP.IBoolean>;
    closePort: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined) => LISP.IBoolean | ["<undefined>"]>;
    closeInputPort: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>) => ["<undefined>"]>;
    closeOutputPort: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>) => ["<undefined>"]>;
    openInputString: import("./interpreter").BuiltInProcedureDefinition<"str", ({ str }: Partial<Record<"str", LISP.Object | LISP.Object[] | null>>) => LISP.IPort>;
    openOutputString: import("./interpreter").BuiltInProcedureDefinition<string, () => LISP.IPort>;
    getOutputString: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>) => LISP.IString>;
    openInputBytevector: import("./interpreter").BuiltInProcedureDefinition<"bvec", ({ bvec }: Partial<Record<"bvec", LISP.Object | LISP.Object[] | null>>) => LISP.IPort>;
    openOutputBytevector: import("./interpreter").BuiltInProcedureDefinition<string, () => LISP.IPort>;
    getOutputBytevector: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>) => LISP.IByteVector>;
    readChar: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.Character | LISP.EndOfFile>;
    peekChar: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.ICharacter | LISP.IEndOfFile>;
    readLine: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.IString>;
    eofObjectQ: import("./interpreter").BuiltInProcedureDefinition<"obj", ({ obj }: Partial<Record<"obj", LISP.Object | LISP.Object[] | null>>) => LISP.IBoolean>;
    eofObject: import("./interpreter").BuiltInProcedureDefinition<string, () => LISP.IEndOfFile>;
    charReadyQ: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.IBoolean>;
    readString: import("./interpreter").BuiltInProcedureDefinition<"k" | "port", ({ k, port }: Partial<Record<"k" | "port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.IString>;
    readU8: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.Number | LISP.EndOfFile>;
    peekU8: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.IEndOfFile | LISP.RealNumber>;
    u8ReadyQ: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.IBoolean>;
    readBytevector: import("./interpreter").BuiltInProcedureDefinition<"k" | "port", ({ k, port }: Partial<Record<"k" | "port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.IByteVector | LISP.IEndOfFile>;
    readBytevectorD: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "bvec" | "port", ({ bvec, port, start, end }: Partial<Record<"end" | "start" | "bvec" | "port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => LISP.INumber | LISP.IEndOfFile>;
    newline: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => ["<undefined>"]>;
    writeChar: import("./interpreter").BuiltInProcedureDefinition<"char" | "port", ({ char, port }: Partial<Record<"char" | "port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => ["<undefined>"]>;
    writeString: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "str" | "port", ({ str, port, start, end }: Partial<Record<"end" | "start" | "str" | "port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => ["<undefined>"]>;
    writeU8: import("./interpreter").BuiltInProcedureDefinition<"byte" | "port", ({ byte, port }: Partial<Record<"byte" | "port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => ["<undefined>"]>;
    writeBytevector: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "bvec" | "port", ({ bvec, port, start, end }: Partial<Record<"end" | "start" | "bvec" | "port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => ["<undefined>"]>;
    flushOutputPort: import("./interpreter").BuiltInProcedureDefinition<"port", ({ port }: Partial<Record<"port", LISP.Object | LISP.Object[] | null>>, itrp: import("./interpreter").Interpreter | undefined, stack: LISP.CallStack | undefined) => ["<undefined>"]>;
};
