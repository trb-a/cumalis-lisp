export declare const procedures: {
    stringQ: import("./interpreter").BuiltInProcedureDefinition<"obj", ({ obj }: Partial<Record<"obj", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IBoolean>;
    makeString: import("./interpreter").BuiltInProcedureDefinition<"char" | "k", ({ k, char }: Partial<Record<"char" | "k", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IString>;
    string: import("./interpreter").BuiltInProcedureDefinition<"chars", ({ chars }: Partial<Record<"chars", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IString>;
    stringLength: import("./interpreter").BuiltInProcedureDefinition<"str", ({ str }: Partial<Record<"str", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.INumber>;
    stringRef: import("./interpreter").BuiltInProcedureDefinition<"k" | "str", ({ str, k }: Partial<Record<"k" | "str", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.ICharacter>;
    stringSetD: import("./interpreter").BuiltInProcedureDefinition<"char" | "k" | "str", ({ str, k, char }: Partial<Record<"char" | "k" | "str", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => ["<undefined>"]>;
    stringEQ: import("./interpreter").BuiltInProcedureDefinition<"str1" | "strs" | "str2", ({ str1, str2, strs }: Partial<Record<"str1" | "strs" | "str2", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IBoolean>;
    stringLtQ: import("./interpreter").BuiltInProcedureDefinition<"str1" | "strs" | "str2", ({ str1, str2, strs }: Partial<Record<"str1" | "strs" | "str2", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IBoolean>;
    stringGtQ: import("./interpreter").BuiltInProcedureDefinition<"str1" | "strs" | "str2", ({ str1, str2, strs }: Partial<Record<"str1" | "strs" | "str2", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IBoolean>;
    stringLeQ: import("./interpreter").BuiltInProcedureDefinition<"str1" | "strs" | "str2", ({ str1, str2, strs }: Partial<Record<"str1" | "strs" | "str2", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IBoolean>;
    stringGeQ: import("./interpreter").BuiltInProcedureDefinition<"str1" | "strs" | "str2", ({ str1, str2, strs }: Partial<Record<"str1" | "strs" | "str2", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IBoolean>;
    substring: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "str", ({ str, start, end }: Partial<Record<"end" | "start" | "str", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IString>;
    stringAppend: import("./interpreter").BuiltInProcedureDefinition<"strs", ({ strs }: Partial<Record<"strs", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IString>;
    stringToList: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "str", ({ str, start, end }: Partial<Record<"end" | "start" | "str", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.List>;
    listToString: import("./interpreter").BuiltInProcedureDefinition<"list", ({ list }: Partial<Record<"list", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IString>;
    stringCopy: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "str", ({ str, start, end }: Partial<Record<"end" | "start" | "str", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IString>;
    stringCopyD: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "to" | "at" | "from", ({ to, at, from, start, end }: Partial<Record<"end" | "start" | "to" | "at" | "from", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => ["<undefined>"]>;
    stringFillD: import("./interpreter").BuiltInProcedureDefinition<"end" | "start" | "fill" | "str", ({ str, fill, start, end }: Partial<Record<"end" | "start" | "fill" | "str", import("./types").LISP.Object | import("./types").LISP.Object[] | null>>) => import("./types").LISP.IString>;
};
